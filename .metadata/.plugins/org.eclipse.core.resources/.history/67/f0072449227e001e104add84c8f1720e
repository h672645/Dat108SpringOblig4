package controllers;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import interfaces.DeltagerRepo;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import objects.Deltager;
import services.DeltagerService;
import util.LoginUtil;

@Controller
public class PaameldingController {

	@Autowired
	private static DeltagerService service;
	
	@Value("${app.message.ugyldigeDetaljer}") private String UGYLDIGE_DETALJER;
	
    @GetMapping("/")
    public String redirectToPaaMeldingMedMelding(Model model) {
    	model.addAttribute("deltager", new Deltager());
    	return "paamelding_med_melding";
    }
    
    @PostMapping("/lagreDeltager")
    public String lagreDeltager(@Valid @ModelAttribute("deltager") Deltager deltager,
//    		HttpServletRequest request,
//    		RedirectAttributes ra,
    		BindingResult bindingResult) {
    	
		if (bindingResult.hasErrors()) {
//			ra.addFlashAttribute("redirectMessage", UGYLDIGE_DETALJER);
			return "redirect:" + "paamelding_med_melding";
		}
    	
    	//.....TESTE HER OM MOBIL EKSISTERER ALLEREDE
    	//..*
    	//..
    	
//    	LoginUtil.loggInnBruker(request, deltager.getMobil(), deltager.getFornavn(), deltager.getEtternavn());
    	
    	return "paameldt";
    }
    
//    @ExceptionHandler(MethodArgumentNotValidException.class)
//    public String handleValidationExceptions(
//      MethodArgumentNotValidException ex) {
//        BindingResult result = ex.getBindingResult();
//        Map<String, Object> model = new HashMap<>();
//        model.put("errors", result.getAllErrors());
//        return "redirect:/error";
//    }
    
}